package concurrent;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 生产者模式
 * 一个初始值为0的变量，两个线程对其操作 一个加1，一个减一，操作5轮
 * @author qqa
 * @version 1.0 2019年7月4日 下午9:15:22
 *
 */
class ShareData{	//资源类
	private int number = 0;
	Lock lock = new ReentrantLock();
	Condition condition = lock.newCondition();

	
	public void increment() throws Exception{
		lock.lock();
		try{
			while(number != 0){
				//等待，不能生产
				condition.await();
			}
			number++;
			System.out.println(Thread.currentThread().getName() + " " + number);
			//通知喚醒
			condition.signalAll();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
	
	public void decrement() throws Exception{
		lock.lock();
		try{
			while(number == 0){
				//等待，不能生产
				condition.await();
			}
			number--;
			System.out.println(Thread.currentThread().getName() + " " + number);
			condition.signalAll();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
}
class ProdConsumer_TraditionDemo {

	public static void main(String[] args) {
		ShareData shareData = new ShareData();
		new Thread(() ->{
			for(int i = 1; i <= 5;i++){
				try {
					shareData.increment();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		},"AA").start();
		
		new Thread(() -> {
			for (int i = 1; i <= 5; i++) {
				try {
					shareData.decrement();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}, "BB").start();
	}

}
