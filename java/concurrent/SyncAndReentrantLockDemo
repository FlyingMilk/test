package concurrent;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 多个线程之间按顺序调用，实现A->B->C三个线程启动，要求如下
 * A打印5次，B打印10次，C打印15次，打印十轮
 * @author qqa
 * @version 1.0 2019年7月4日 下午9:32:29
 *
 */

class ShareDatas{
	private int num = 1;
	private Lock lock = new ReentrantLock();
	Condition c1 = lock.newCondition();
	Condition c2 = lock.newCondition();
	Condition c3 = lock.newCondition();
	
	public void func_Print(){
		lock.lock();
		try{
			while(num != 1){
				c1.await();
			}
			for(int i = 1; i <= 5; i++){
				System.out.println(Thread.currentThread().getName()+" " + i);
			}
			num = 2;
			c2.signal();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
	
	public void func_Print2(){
		lock.lock();
		try{
			while(num != 2){
				c2.await();
			}
			for(int i = 1; i <= 10; i++){
				System.out.println(Thread.currentThread().getName()+" " + i);
			}
			num = 3;
			c3.signal();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
	

	public void func_Print3(){
		lock.lock();
		try{
			while(num != 3){
				c3.await();
			}
			for(int i = 1; i <= 15; i++){
				System.out.println(Thread.currentThread().getName()+" " + i);
			}
			num = 1;
			c1.signal();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
}
public class SyncAndReentrantLockDemo {

	public static void main(String[] args) {
		ShareDatas shareDatas = new ShareDatas();
		
		new Thread(() -> {
			for(int i = 1; i <= 10; i++){
				shareDatas.func_Print();
			}
		},"A").start();
		
		new Thread(() -> {
			for(int i = 1; i <= 10; i++){
				shareDatas.func_Print2();
			}
		},"B").start();
	
		new Thread(() -> {
			for(int i = 1; i <= 10; i++){
				shareDatas.func_Print3();
			}
		},"C").start();
	}

}
