package concurrent;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantReadWriteLock;

class MyCache{	//资源类
	
	private volatile Map<String, Object> map = new HashMap<>();
	private ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
	
	/**
	 * 写操作 独占
	 * @param key
	 * @param value
	 */
	public void put(String key,Object value){
		
		rwLock.writeLock().lock();
		try {
			System.out.println(Thread.currentThread().getName()+"\t 正在写入..." + key);
			try {
				TimeUnit.MILLISECONDS.sleep(300);	//模拟网络延迟，线程等待3秒
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			map.put(key, value);
			System.out.println(Thread.currentThread().getName()+"\t 写入完成..." );
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			rwLock.writeLock().unlock();
		}
	}
	
	/**
	 * 读操作 共享
	 * @param key
	 */
	public void get(String key){
		rwLock.readLock().lock();
		try {
			System.out.println(Thread.currentThread().getName() + "\t 正在读取...");
			try {
				TimeUnit.MILLISECONDS.sleep(3); // 模拟网络延迟，线程等待3秒
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			Object result = map.get(key);
			System.out.println(Thread.currentThread().getName() + "\t 读取完成..." + result);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			rwLock.readLock().unlock();
		}
	}
	
	//清缓存
	public void clearMap(){
		map.clear();
	}
}
public class ReadWriteLockDemo {

	public static void main(String[] args) {
		MyCache mCache = new MyCache();
		
		for (int i = 1; i <= 5; i++) {
			final  int  tempInt = i;
			new Thread(() -> {
				mCache.put(tempInt+"", tempInt+"");
			},String.valueOf(i)).start();
		}
		
		for (int i = 1; i <= 5; i++) {
			final  int  tempInt = i;
			new Thread(() -> {
				mCache.get(tempInt+"");
			},String.valueOf(i)).start();
		}
	}

}
